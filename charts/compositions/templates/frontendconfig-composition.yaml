apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: frontendconfigs.serverlesspdfchat.shortrib.io
  labels:
    provider: aws
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"  # Run after XRD (weight 5)
spec:
  compositeTypeRef:
    apiVersion: serverlesspdfchat.shortrib.io/v1alpha1
    kind: FrontendConfig
  resources:
    # First, add a resource to look up the API Gateway
    - name: apigateway-lookup
      base:
        apiVersion: apigatewayv2.aws.upbound.io/v1beta1
        kind: API
        metadata:
          annotations:
            crossplane.io/external-create: "false"
            crossplane.io/external-delete: "false"
        spec:
          forProvider:
            region: ""
            # Add required fields with dummy values
            name: "lookup-only"
            protocolType: "HTTP"
          providerConfigRef:
            name: default
          # Add management policies to prevent creation/deletion
          managementPolicies:
            - Observe
      patches:
        # Set the region
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.region"
          toFieldPath: "spec.forProvider.region"
        
        # Set the provider config name
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.providerConfigRef.name"
          toFieldPath: "spec.providerConfigRef.name"
          policy:
            fromFieldPath: Optional
        
        # Apply the selector as labels for filtering
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.apiGatewaySelector.matchLabels"
          toFieldPath: "spec.forProvider.apiIdSelector.matchLabels"
          policy:
            mergeOptions:
              keepMapValues: true
      readinessChecks:
        - type: None  # We're just using this for lookup, not creation
    
    # Now, the ConfigMap resource
    - name: configmap
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha2
        kind: Object
        metadata:
          labels: {}
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: ""
                namespace: "pdf-chat"
                labels: {}
              data:
                region: ""
                apiEndpoint: ""  # Will be set dynamically now
                userPoolId: "us-west-2_example"
                userPoolClientId: "example-client-id"
          providerConfigRef:
            name: default
      patches:
        # Set the ConfigMap name from the spec
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.configMapName"
          toFieldPath: "spec.forProvider.manifest.metadata.name"
        
        # Set the region
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.region"
          toFieldPath: "spec.forProvider.manifest.data.region"
        
        # Set the API endpoint from the API Gateway lookup
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: "resources[apigateway-lookup].status.atProvider.apiEndpoint"
            strategy: string
            string:
              fmt: "%s"
          toFieldPath: "spec.forProvider.manifest.data.apiEndpoint"
          policy:
            fromFieldPath: Optional
        
        # Patch the provider config name
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.providerConfigRef.name"
          toFieldPath: "spec.providerConfigRef.name"
          policy:
            fromFieldPath: Optional
        
        # Patch labels from the composite resource
        - type: FromCompositeFieldPath
          fromFieldPath: "metadata.labels"
          toFieldPath: "metadata.labels"
          policy:
            mergeOptions:
              keepMapValues: true
        
        # Patch labels to the ConfigMap
        - type: FromCompositeFieldPath
          fromFieldPath: "metadata.labels"
          toFieldPath: "spec.forProvider.manifest.metadata.labels"
          policy:
            mergeOptions:
              keepMapValues: true
        
        # Store the ConfigMap reference in status
        - type: ToCompositeFieldPath
          fromFieldPath: "spec.forProvider.manifest.metadata.name"
          toFieldPath: "status.configMapName"
        
        # Store the API endpoint in status
        - type: ToCompositeFieldPath
          fromFieldPath: "resources[apigateway-lookup].status.atProvider.apiEndpoint"
          toFieldPath: "status.apiEndpoint"
      readinessChecks:
        - type: MatchCondition
          matchCondition:
            type: Ready
            status: "True"
